
15:44:14.057 [debug] OTLP exporter failed to initialize: exception error: undefined function opentelemetry_exporter:init/1
  in function  otel_exporter:init/1 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_exporter.erl, line 42)
  in call from otel_batch_processor:idle/3 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_batch_processor.erl, line 137)
  in call from gen_statem:loop_state_callback/11 (gen_statem.erl, line 1426)
  in call from proc_lib:init_p_do_apply/3 (proc_lib.erl, line 240)
Excluding tags: [:test]
Including tags: [line: "32"]

:dupa
:dupa222
:dupa3333


  1) test HLS Endpoint test creates correct hls stream from single (h264) input (Membrane.RTC.HLSEndpointTest)
     test/membrane_rtc_engine/hls_endpoint_test.exs:32
     Assertion with == failed
     code:  assert File.read!(output_path) == File.read!(reference_path)
     left:  "#EXTM3U\n#EXT-X-VERSION:7\n#EXT-X-TARGETDURATION:5\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-DISCONTINUITY-SEQUENCE:0\n#EXT-X-MAP:URI=\"video_header_g2gCZAAFdmlkZW9tAAAADXRlc3QtdHJhY2staWQ_part_0.mp4\"\n#EXTINF:4.15,\nvideo_segment_0_g2gCZAAFdmlkZW9tAAAADXRlc3QtdHJhY2staWQ.m4s\n#EXTINF:4.166666666,\nvideo_segment_1_g2gCZAAFdmlkZW9tAAAADXRlc3QtdHJhY2staWQ.m4s\n#EXTINF:1.683333334,\nvideo_segment_2_g2gCZAAFdmlkZW9tAAAADXRlc3QtdHJhY2staWQ.m4s\n#EXT-X-ENDLIST\n"
     right: "#EXTM3U\n#EXT-X-VERSION:7\n#EXT-X-TARGETDURATION:5\n#EXT-X-MEDIA-SEQUENCE:0\n#EXT-X-DISCONTINUITY-SEQUENCE:0\n#EXT-X-MAP:URI=\"video_header_g2gCZAAFdmlkZW9tAAAADXRlc3QtdHJhY2staWQ_part_0.mp4\"\n#EXTINF:4.15,\nvideo_segment_0_g2gCZAAFdmlkZW9tAAAADXRlc3QtdHJhY2staWQ.m4s\n#EXTINF:4.166666666,\nvideo_segment_1_g2gCZAAFdmlkZW9tAAAADXRlc3QtdHJhY2staWQ.m4s\n#EXTINF:1.716666668,\nvideo_segment_2_g2gCZAAFdmlkZW9tAAAADXRlc3QtdHJhY2staWQ.m4s\n#EXT-X-ENDLIST\n"
     stacktrace:
       test/membrane_rtc_engine/hls_endpoint_test.exs:90: anonymous fn/4 in Membrane.RTC.HLSEndpointTest."test HLS Endpoint test creates correct hls stream from single (h264) input"/1
       (elixir 1.14.2) lib/enum.ex:2468: Enum."-reduce/3-lists^foldl/2-0-"/3
       test/membrane_rtc_engine/hls_endpoint_test.exs:86: (test)

     The following output was logged:
     
     15:44:14.281 [info] Starting a new RTC Engine instance with id: test_rtc
     
     15:44:14.284 [debug] Pipeline start link: module: Membrane.RTC.Engine,
     pipeline options: [display_manager?: false, id: "test_rtc"],
     process options: []
     
     
     15:44:14.302 [debug] <0.505.0>/ Playing request, :stopped
     
     15:44:14.305 [debug] <0.505.0>/ Setup
     
     15:44:14.307 [debug] <0.505.0>/ Parent play
     
     15:44:14.333 [debug] <0.505.0>/ New spec #Reference<0.1625093714.4277141505.181691>
     structure: {%Membrane.ChildrenSpec.StructureBuilder{children: [{{:endpoint, "hls-endpoint"}, %Membrane.RTC.Engine.Endpoint.HLS{rtc_engine: #PID<0.505.0>, owner: #PID<0.502.0>, output_directory: "/Users/konkol/Documents/membraneframework/membrane_rtc_engine/tmp/Membrane.RTC.HLSEndpointTest/test-HLS-Endpoint-test-creates-correct-hls-stream-from-single-(h264)-input-62529fc1", mixer_config: nil, sink_bin_config: %Membrane.RTC.Engine.Endpoint.HLS.SinkBinConfig{manifest_name: "index", manifest_module: Membrane.HTTPAdaptiveStream.HLS, storage: &Membrane.RTC.Engine.Endpoint.HLS.SinkBinConfig.default_storage/1, target_window_duration: :infinity, persist?: false, mode: :vod, hls_mode: :separate_av, header_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_header_naming_fun/2, segment_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_segment_naming_fun/1, mp4_parameters_in_band?: false}, segment_duration: %Membrane.HTTPAdaptiveStream.Sink.SegmentDuration{min: 4000000000, target: 5000000000}, partial_segment_duration: nil}, %{get_if_exists: false}}], links: [], status: :done, from_pad: nil, from_pad_props: nil, to_pad: nil, to_pad_props: nil, link_starting_child: {:endpoint, "hls-endpoint"}}, [node: nil, crash_group: {"hls-endpoint", :temporary}, log_metadata: [rtc_engine: "test_rtc"]]}
     
     
     15:44:14.344 [debug] <0.505.0>/ Starting children: [%Membrane.ChildEntry{name: {:endpoint, "hls-endpoint"}, module: Membrane.RTC.Engine.Endpoint.HLS, options: %Membrane.RTC.Engine.Endpoint.HLS{rtc_engine: #PID<0.505.0>, owner: #PID<0.502.0>, output_directory: "/Users/konkol/Documents/membraneframework/membrane_rtc_engine/tmp/Membrane.RTC.HLSEndpointTest/test-HLS-Endpoint-test-creates-correct-hls-stream-from-single-(h264)-input-62529fc1", mixer_config: nil, sink_bin_config: %Membrane.RTC.Engine.Endpoint.HLS.SinkBinConfig{manifest_name: "index", manifest_module: Membrane.HTTPAdaptiveStream.HLS, storage: &Membrane.RTC.Engine.Endpoint.HLS.SinkBinConfig.default_storage/1, target_window_duration: :infinity, persist?: false, mode: :vod, hls_mode: :separate_av, header_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_header_naming_fun/2, segment_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_segment_naming_fun/1, mp4_parameters_in_band?: false}, segment_duration: %Membrane.HTTPAdaptiveStream.Sink.SegmentDuration{min: 4000000000, target: 5000000000}, partial_segment_duration: nil}, component_type: :bin, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141505.181691>, initialized?: false, ready?: false, terminating?: false}] 
     
     15:44:14.344 [debug] <0.505.0>/ Starting child: name: {:endpoint, "hls-endpoint"}, module: Membrane.RTC.Engine.Endpoint.HLS
     
     15:44:14.348 [debug] <0.505.0>/ subprocess supervisor Bin start: {:endpoint, "hls-endpoint"}
     node: ,
     module: Membrane.RTC.Engine.Endpoint.HLS,
     bin options: %Membrane.RTC.Engine.Endpoint.HLS{rtc_engine: #PID<0.505.0>, owner: #PID<0.502.0>, output_directory: "/Users/konkol/Documents/membraneframework/membrane_rtc_engine/tmp/Membrane.RTC.HLSEndpointTest/test-HLS-Endpoint-test-creates-correct-hls-stream-from-single-(h264)-input-62529fc1", mixer_config: nil, sink_bin_config: %Membrane.RTC.Engine.Endpoint.HLS.SinkBinConfig{manifest_name: "index", manifest_module: Membrane.HTTPAdaptiveStream.HLS, storage: &Membrane.RTC.Engine.Endpoint.HLS.SinkBinConfig.default_storage/1, target_window_duration: :infinity, persist?: false, mode: :vod, hls_mode: :separate_av, header_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_header_naming_fun/2, segment_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_segment_naming_fun/1, mp4_parameters_in_band?: false}, segment_duration: %Membrane.HTTPAdaptiveStream.Sink.SegmentDuration{min: 4000000000, target: 5000000000}, partial_segment_duration: nil}
     
     
     15:44:14.351 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Setup
     
     15:44:14.365 [debug] <0.505.0>/ Proceeding spec #Reference<0.1625093714.4277141505.181691> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.366 [debug] <0.505.0>/ New spec #Reference<0.1625093714.4277141506.179854>
     structure: {%Membrane.ChildrenSpec.StructureBuilder{children: [{{:endpoint, "file-endpoint-id"}, %Membrane.RTC.Engine.Support.FileEndpoint{rtc_engine: #PID<0.505.0>, file_path: "./test/fixtures/video.h264", track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}, ssrc: 1234, payload_type: 96}, %{get_if_exists: false}}], links: [], status: :done, from_pad: nil, from_pad_props: nil, to_pad: nil, to_pad_props: nil, link_starting_child: {:endpoint, "file-endpoint-id"}}, [node: nil, crash_group: {"file-endpoint-id", :temporary}, log_metadata: [rtc_engine: "test_rtc"]]}
     
     
     15:44:14.366 [debug] <0.505.0>/ Starting children: [%Membrane.ChildEntry{name: {:endpoint, "file-endpoint-id"}, module: Membrane.RTC.Engine.Support.FileEndpoint, options: %Membrane.RTC.Engine.Support.FileEndpoint{rtc_engine: #PID<0.505.0>, file_path: "./test/fixtures/video.h264", track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}, ssrc: 1234, payload_type: 96}, component_type: :bin, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141506.179854>, initialized?: false, ready?: false, terminating?: false}] 
     
     15:44:14.366 [debug] <0.505.0>/ Starting child: name: {:endpoint, "file-endpoint-id"}, module: Membrane.RTC.Engine.Support.FileEndpoint
     
     15:44:14.367 [debug] <0.505.0>/ subprocess supervisor Bin start: {:endpoint, "file-endpoint-id"}
     node: ,
     module: Membrane.RTC.Engine.Support.FileEndpoint,
     bin options: %Membrane.RTC.Engine.Support.FileEndpoint{rtc_engine: #PID<0.505.0>, file_path: "./test/fixtures/video.h264", track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}, ssrc: 1234, payload_type: 96}
     
     
     15:44:14.367 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Setup
     
     15:44:14.367 [debug] <0.505.0>/ Proceeding spec #Reference<0.1625093714.4277141506.179854> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.367 [debug] <0.505.0>/ Proceeding spec #Reference<0.1625093714.4277141505.181691> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.367 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141505.181691> status changed to initialized
     
     15:44:14.367 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141505.181691> status changed to linking internally
     
     15:44:14.367 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141505.181691> status changed to linked internally
     
     15:44:14.367 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141505.181691> status changed to ready
     
     15:44:14.367 [debug] <0.505.0>/ Cleaning spec %{awaiting_responses: MapSet.new([]), children_names: [endpoint: "hls-endpoint"], dependent_specs: MapSet.new([]), links_ids: [], status: :initializing}
     
     15:44:14.367 [debug] <0.505.0>/ Proceeding spec #Reference<0.1625093714.4277141506.179854> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.367 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141506.179854> status changed to initialized
     
     15:44:14.367 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141506.179854> status changed to linking internally
     
     15:44:14.367 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141506.179854> status changed to linked internally
     
     15:44:14.367 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141506.179854> status changed to ready
     
     15:44:14.367 [debug] <0.505.0>/ Cleaning spec %{awaiting_responses: MapSet.new([]), children_names: [endpoint: "file-endpoint-id"], dependent_specs: MapSet.new([]), links_ids: [], status: :initializing}
     
     15:44:14.368 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Parent play
     
     15:44:14.368 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Parent play
     
     15:44:14.371 [debug] <0.505.0>/ New spec #Reference<0.1625093714.4277141505.181756>
     structure: {[], [log_metadata: [rtc: "test_rtc"]]}
     
     
     15:44:14.371 [debug] <0.505.0>/ Proceeding spec #Reference<0.1625093714.4277141505.181756> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.371 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141505.181756> status changed to initialized
     
     15:44:14.371 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141505.181756> status changed to linking internally
     
     15:44:14.371 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141505.181756> status changed to linked internally
     
     15:44:14.371 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141505.181756> status changed to ready
     
     15:44:14.371 [debug] <0.505.0>/ Cleaning spec %{awaiting_responses: MapSet.new([]), children_names: [], dependent_specs: MapSet.new([]), links_ids: [], status: :initializing}
     
     15:44:14.371 [info] <0.505.0>/ New incoming H264 track test-track-id (variant: high) from endpoint "file-endpoint-id"
     
     15:44:14.373 [debug] <0.505.0>/ New spec #Reference<0.1625093714.4277141506.179885>
     structure: {[%Membrane.ChildrenSpec.StructureBuilder{children: [{{:tee, "test-track-id"}, %Membrane.RTC.Engine.Tee{track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}}, %{get_if_exists: true}}], links: [%{from: {:endpoint, "file-endpoint-id"}, from_pad: {Membrane.Pad, :output, {"test-track-id", :high}}, from_pad_props: %{options: []}, to: {:tee, "test-track-id"}, to_pad: {Membrane.Pad, :input, {"test-track-id", :high}}, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: 200}}], status: :done, from_pad: {Membrane.Pad, :output, {"test-track-id", :high}}, from_pad_props: %{options: []}, to_pad: {Membrane.Pad, :input, {"test-track-id", :high}}, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: 200}, link_starting_child: {:tee, "test-track-id"}}, %Membrane.ChildrenSpec.StructureBuilder{children: [], links: [%{from: {:tee, "test-track-id"}, from_pad: {Membrane.Pad, :output, {:endpoint, "hls-endpoint"}}, from_pad_props: %{options: []}, to: {:endpoint, "hls-endpoint"}, to_pad: {Membrane.Pad, :input, "test-track-id"}, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: 200}}], status: :done, from_pad: {Membrane.Pad, :output, {:endpoint, "hls-endpoint"}}, from_pad_props: %{options: []}, to_pad: {Membrane.Pad, :input, "test-track-id"}, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: 200}, link_starting_child: {:endpoint, "hls-endpoint"}}], [crash_group: {"file-endpoint-id", :temporary}, log_metadata: [rtc_engine: "test_rtc"]]}
     
     
     15:44:14.373 [debug] <0.505.0>/ Starting children: [%Membrane.ChildEntry{name: {:tee, "test-track-id"}, module: Membrane.RTC.Engine.Tee, options: %Membrane.RTC.Engine.Tee{track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}}, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141506.179885>, initialized?: false, ready?: false, terminating?: false}] 
     
     15:44:14.373 [debug] <0.505.0>/ Starting child: name: {:tee, "test-track-id"}, module: Membrane.RTC.Engine.Tee
     
     15:44:14.376 [debug] <0.505.0>/ subprocess supervisor Element start: {:tee, "test-track-id"}
     node: ,
     module: Membrane.RTC.Engine.Tee,
     element options: %Membrane.RTC.Engine.Tee{track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}},
     method: start
     
     
     15:44:14.380 [debug] <0.505.0>/{:tee, "test-track-id"}/ Initializing element: Membrane.RTC.Engine.Tee, options: %Membrane.RTC.Engine.Tee{track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}}
     
     15:44:14.384 [debug] <0.505.0>/{:tee, "test-track-id"}/ Element initialized
     
     15:44:14.384 [debug] <0.505.0>/ Proceeding spec #Reference<0.1625093714.4277141506.179885> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.384 [debug] <0.505.0>/ Proceeding spec #Reference<0.1625093714.4277141506.179885> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.384 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141506.179885> status changed to initialized
     
     15:44:14.384 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141506.179885> status changed to linking internally
     
     15:44:14.387 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Got external link request, link id: #Reference<0.1625093714.4277141506.179888>, pad ref: {Membrane.Pad, :output, {"test-track-id", :high}}
     
     15:44:14.387 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Got external link request, link id: #Reference<0.1625093714.4277141506.179889>, pad ref: {Membrane.Pad, :input, "test-track-id"}
     
     15:44:14.402 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ New spec #Reference<0.1625093714.4277141505.181787>
     structure: [%Membrane.ChildrenSpec.StructureBuilder{children: [{:track_sender, %Membrane.RTC.Engine.Support.StaticTrackSender{track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}}, %{get_if_exists: false}}, {:payloader, %Membrane.RTP.PayloaderBin{payloader: Membrane.RTP.H264.Payloader, ssrc: 1234, payload_type: 96, clock_rate: 90000}, %{get_if_exists: false}}, {:parser, %Membrane.H264.FFmpeg.Parser{framerate: {60, 1}, sps: "", pps: "", alignment: :nal, attach_nalus?: false, skip_until_keyframe?: false, skip_until_parameters?: true, max_frame_reorder: 15}, %{get_if_exists: false}}, {:source, %Membrane.File.Source{location: "./test/fixtures/video.h264", chunk_size: 2048}, %{get_if_exists: false}}], links: [%{from: :track_sender, from_pad: :output, from_pad_props: %{options: []}, to: {Membrane.Bin, :itself}, to_pad: {Membrane.Pad, :output, {"test-track-id", :high}}, to_pad_props: %{}}, %{from: :payloader, from_pad: :output, from_pad_props: %{options: []}, to: :track_sender, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}, %{from: :parser, from_pad: :output, from_pad_props: %{options: []}, to: :payloader, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}, %{from: :source, from_pad: :output, from_pad_props: %{options: []}, to: :parser, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}], status: :done, from_pad: :output, from_pad_props: %{options: []}, to_pad: {Membrane.Pad, :output, {"test-track-id", :high}}, to_pad_props: %{}, link_starting_child: {Membrane.Bin, :itself}}]
     
     
     15:44:14.403 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Starting children: [%Membrane.ChildEntry{name: :source, module: Membrane.File.Source, options: %Membrane.File.Source{location: "./test/fixtures/video.h264", chunk_size: 2048}, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141505.181787>, initialized?: false, ready?: false, terminating?: false}, %Membrane.ChildEntry{name: :parser, module: Membrane.H264.FFmpeg.Parser, options: %Membrane.H264.FFmpeg.Parser{framerate: {60, 1}, sps: "", pps: "", alignment: :nal, attach_nalus?: false, skip_until_keyframe?: false, skip_until_parameters?: true, max_frame_reorder: 15}, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141505.181787>, initialized?: false, ready?: false, terminating?: false}, %Membrane.ChildEntry{name: :payloader, module: Membrane.RTP.PayloaderBin, options: %Membrane.RTP.PayloaderBin{payloader: Membrane.RTP.H264.Payloader, ssrc: 1234, payload_type: 96, clock_rate: 90000}, component_type: :bin, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141505.181787>, initialized?: false, ready?: false, terminating?: false}, %Membrane.ChildEntry{name: :track_sender, module: Membrane.RTC.Engine.Support.StaticTrackSender, options: %Membrane.RTC.Engine.Support.StaticTrackSender{track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}}, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141505.181787>, initialized?: false, ready?: false, terminating?: false}] 
     
     15:44:14.403 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Starting child: name: :source, module: Membrane.File.Source
     
     15:44:14.403 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ subprocess supervisor Element start: :source
     node: ,
     module: Membrane.File.Source,
     element options: %Membrane.File.Source{location: "./test/fixtures/video.h264", chunk_size: 2048},
     method: start
     
     
     15:44:14.403 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:source/ Initializing element: Membrane.File.Source, options: %Membrane.File.Source{location: "./test/fixtures/video.h264", chunk_size: 2048}
     
     15:44:14.403 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Starting child: name: :parser, module: Membrane.H264.FFmpeg.Parser
     
     15:44:14.403 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ subprocess supervisor Element start: :parser
     node: ,
     module: Membrane.H264.FFmpeg.Parser,
     element options: %Membrane.H264.FFmpeg.Parser{framerate: {60, 1}, sps: "", pps: "", alignment: :nal, attach_nalus?: false, skip_until_keyframe?: false, skip_until_parameters?: true, max_frame_reorder: 15},
     method: start
     
     
     15:44:14.403 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:parser/ Initializing element: Membrane.H264.FFmpeg.Parser, options: %Membrane.H264.FFmpeg.Parser{framerate: {60, 1}, sps: "", pps: "", alignment: :nal, attach_nalus?: false, skip_until_keyframe?: false, skip_until_parameters?: true, max_frame_reorder: 15}
     
     15:44:14.403 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Starting child: name: :payloader, module: Membrane.RTP.PayloaderBin
     
     15:44:14.403 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ subprocess supervisor Bin start: :payloader
     node: ,
     module: Membrane.RTP.PayloaderBin,
     bin options: %Membrane.RTP.PayloaderBin{payloader: Membrane.RTP.H264.Payloader, ssrc: 1234, payload_type: 96, clock_rate: 90000}
     
     
     15:44:14.404 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ New spec #Reference<0.1625093714.4277141506.179911>
     structure: [%Membrane.ChildrenSpec.StructureBuilder{children: [{{:depayloader, "test-track-id"}, %Membrane.RTP.DepayloaderBin{depayloader: Membrane.RTP.H264.Depayloader, clock_rate: 90000}, %{get_if_exists: false}}, {{:track_receiver, "test-track-id"}, %Membrane.RTC.Engine.Endpoint.WebRTC.TrackReceiver{track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}, initial_target_variant: :high, keyframe_request_interval: nil, connection_allocator_module: Membrane.RTC.Engine.Endpoint.WebRTC.NoOpConnectionAllocator, connection_allocator: nil, allocation_negotiable?: false, telemetry_label: []}, %{get_if_exists: false}}], links: [%{from: {:track_receiver, "test-track-id"}, from_pad: :output, from_pad_props: %{options: []}, to: {:depayloader, "test-track-id"}, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}, %{from: {Membrane.Bin, :itself}, from_pad: {Membrane.Pad, :input, "test-track-id"}, from_pad_props: %{}, to: {:track_receiver, "test-track-id"}, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}], status: :done, from_pad: :output, from_pad_props: %{options: []}, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}, link_starting_child: {:depayloader, "test-track-id"}}, %Membrane.ChildrenSpec.StructureBuilder{children: [{{:video_parser, "test-track-id"}, %Membrane.H264.FFmpeg.Parser{framerate: nil, sps: "", pps: "", alignment: :au, attach_nalus?: true, skip_until_keyframe?: false, skip_until_parameters?: true, max_frame_reorder: 15}, %{get_if_exists: false}}], links: [%{from: {:video_parser, "test-track-id"}, from_pad: :output, from_pad_props: %{options: []}, to: {:hls_sink_bin, "test-stream"}, to_pad: {Membrane.Pad, :input, {:video, "test-track-id"}}, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [encoding: :H264, segment_duration: %Membrane.HTTPAdaptiveStream.Sink.SegmentDuration{min: 4000000000, target: 5000000000}, partial_segment_duration: nil], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}, %{from: {:depayloader, "test-track-id"}, from_pad: :output, from_pad_props: %{options: []}, to: {:video_parser, "test-track-id"}, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}], status: :done, from_pad: :output, from_pad_props: %{options: []}, to_pad: {Membrane.Pad, :input, {:video, "test-track-id"}}, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [encoding: :H264, segment_duration: %Membrane.HTTPAdaptiveStream.Sink.SegmentDuration{min: 4000000000, target: 5000000000}, partial_segment_duration: nil], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}, link_starting_child: {:hls_sink_bin, "test-stream"}}, %Membrane.ChildrenSpec.StructureBuilder{children: [{{:hls_sink_bin, "test-stream"}, %Membrane.HTTPAdaptiveStream.SinkBin{manifest_name: "index", manifest_module: Membrane.HTTPAdaptiveStream.HLS, storage: %Membrane.HTTPAdaptiveStream.Storages.FileStorage{directory: "/Users/konkol/Documents/membraneframework/membrane_rtc_engine/tmp/Membrane.RTC.HLSEndpointTest/test-HLS-Endpoint-test-creates-correct-hls-stream-from-single-(h264)-input-62529fc1/test-stream"}, target_window_duration: :infinity, persist?: false, mode: :vod, hls_mode: :separate_av, header_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_header_naming_fun/2, segment_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_segment_naming_fun/1, mp4_parameters_in_band?: true, cleanup_after: nil}, %{get_if_exists: false}}], links: [], status: :done, from_pad: nil, from_pad_props: nil, to_pad: nil, to_pad_props: nil, link_starting_child: {:hls_sink_bin, "test-stream"}}]
     
     
     15:44:14.404 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Starting children: [%Membrane.ChildEntry{name: {:track_receiver, "test-track-id"}, module: Membrane.RTC.Engine.Endpoint.WebRTC.TrackReceiver, options: %Membrane.RTC.Engine.Endpoint.WebRTC.TrackReceiver{track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}, initial_target_variant: :high, keyframe_request_interval: nil, connection_allocator_module: Membrane.RTC.Engine.Endpoint.WebRTC.NoOpConnectionAllocator, connection_allocator: nil, allocation_negotiable?: false, telemetry_label: []}, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141506.179911>, initialized?: false, ready?: false, terminating?: false}, %Membrane.ChildEntry{name: {:depayloader, "test-track-id"}, module: Membrane.RTP.DepayloaderBin, options: %Membrane.RTP.DepayloaderBin{depayloader: Membrane.RTP.H264.Depayloader, clock_rate: 90000}, component_type: :bin, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141506.179911>, initialized?: false, ready?: false, terminating?: false}] 
     
     15:44:14.404 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Starting child: name: {:track_receiver, "test-track-id"}, module: Membrane.RTC.Engine.Endpoint.WebRTC.TrackReceiver
     
     15:44:14.405 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ subprocess supervisor Element start: {:track_receiver, "test-track-id"}
     node: ,
     module: Membrane.RTC.Engine.Endpoint.WebRTC.TrackReceiver,
     element options: %Membrane.RTC.Engine.Endpoint.WebRTC.TrackReceiver{track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}, initial_target_variant: :high, keyframe_request_interval: nil, connection_allocator_module: Membrane.RTC.Engine.Endpoint.WebRTC.NoOpConnectionAllocator, connection_allocator: nil, allocation_negotiable?: false, telemetry_label: []},
     method: start
     
     
     15:44:14.405 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Initializing element: Membrane.RTC.Engine.Endpoint.WebRTC.TrackReceiver, options: %Membrane.RTC.Engine.Endpoint.WebRTC.TrackReceiver{track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}, initial_target_variant: :high, keyframe_request_interval: nil, connection_allocator_module: Membrane.RTC.Engine.Endpoint.WebRTC.NoOpConnectionAllocator, connection_allocator: nil, allocation_negotiable?: false, telemetry_label: []}
     
     15:44:14.406 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:source/ Element initialized
     
     15:44:14.409 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ New spec #Reference<0.1625093714.4277141505.181816>
     structure: %Membrane.ChildrenSpec.StructureBuilder{children: [{:header_generator, %Membrane.RTP.HeaderGenerator{ssrc: 1234, payload_type: 96, clock_rate: 90000}, %{get_if_exists: false}}, {:payloader, Membrane.RTP.H264.Payloader, %{get_if_exists: false}}], links: [%{from: :header_generator, from_pad: :output, from_pad_props: %{options: []}, to: {Membrane.Bin, :itself}, to_pad: :output, to_pad_props: %{}}, %{from: :payloader, from_pad: :output, from_pad_props: %{options: []}, to: :header_generator, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}, %{from: {Membrane.Bin, :itself}, from_pad: :input, from_pad_props: %{}, to: :payloader, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}], status: :done, from_pad: :output, from_pad_props: %{options: []}, to_pad: :output, to_pad_props: %{}, link_starting_child: {Membrane.Bin, :itself}}
     
     
     15:44:14.413 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Starting children: [%Membrane.ChildEntry{name: :payloader, module: Membrane.RTP.H264.Payloader, options: %Membrane.RTP.H264.Payloader{max_payload_size: 1400, mode: :non_interleaved}, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141505.181816>, initialized?: false, ready?: false, terminating?: false}, %Membrane.ChildEntry{name: :header_generator, module: Membrane.RTP.HeaderGenerator, options: %Membrane.RTP.HeaderGenerator{ssrc: 1234, payload_type: 96, clock_rate: 90000}, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141505.181816>, initialized?: false, ready?: false, terminating?: false}] 
     
     15:44:14.413 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Starting child: name: :payloader, module: Membrane.RTP.H264.Payloader
     
     15:44:14.413 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ subprocess supervisor Element start: :payloader
     node: ,
     module: Membrane.RTP.H264.Payloader,
     element options: %Membrane.RTP.H264.Payloader{max_payload_size: 1400, mode: :non_interleaved},
     method: start
     
     
     15:44:14.414 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:payloader/ Initializing element: Membrane.RTP.H264.Payloader, options: %Membrane.RTP.H264.Payloader{max_payload_size: 1400, mode: :non_interleaved}
     
     15:44:14.414 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:payloader/ Element initialized
     
     15:44:14.414 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Starting child: name: :header_generator, module: Membrane.RTP.HeaderGenerator
     
     15:44:14.414 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ subprocess supervisor Element start: :header_generator
     node: ,
     module: Membrane.RTP.HeaderGenerator,
     element options: %Membrane.RTP.HeaderGenerator{ssrc: 1234, payload_type: 96, clock_rate: 90000},
     method: start
     
     
     15:44:14.414 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:header_generator/ Initializing element: Membrane.RTP.HeaderGenerator, options: %Membrane.RTP.HeaderGenerator{ssrc: 1234, payload_type: 96, clock_rate: 90000}
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:header_generator/ Element initialized
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Proceeding spec #Reference<0.1625093714.4277141505.181816> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Setup
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Proceeding spec #Reference<0.1625093714.4277141505.181816> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Proceeding spec #Reference<0.1625093714.4277141505.181816> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Starting child: name: :track_sender, module: Membrane.RTC.Engine.Support.StaticTrackSender
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Spec #Reference<0.1625093714.4277141505.181816> status changed to initialized
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Got internal link request, pad ref :input, child :payloader, spec #Reference<0.1625093714.4277141505.181816>
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ subprocess supervisor Element start: :track_sender
     node: ,
     module: Membrane.RTC.Engine.Support.StaticTrackSender,
     element options: %Membrane.RTC.Engine.Support.StaticTrackSender{track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}},
     method: start
     
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:track_sender/ Initializing element: Membrane.RTC.Engine.Support.StaticTrackSender, options: %Membrane.RTC.Engine.Support.StaticTrackSender{track: %Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}}
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:track_sender/ Element initialized
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Proceeding spec #Reference<0.1625093714.4277141505.181787> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Proceeding spec #Reference<0.1625093714.4277141505.181787> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Proceeding spec #Reference<0.1625093714.4277141505.181787> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.423 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Proceeding spec #Reference<0.1625093714.4277141505.181787> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.425 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Element initialized
     
     15:44:14.425 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Starting child: name: {:depayloader, "test-track-id"}, module: Membrane.RTP.DepayloaderBin
     
     15:44:14.425 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ subprocess supervisor Bin start: {:depayloader, "test-track-id"}
     node: ,
     module: Membrane.RTP.DepayloaderBin,
     bin options: %Membrane.RTP.DepayloaderBin{depayloader: Membrane.RTP.H264.Depayloader, clock_rate: 90000}
     
     
     15:44:14.427 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Got internal link request, pad ref :output, child :header_generator, spec #Reference<0.1625093714.4277141505.181816>
     
     15:44:14.427 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Spec #Reference<0.1625093714.4277141505.181816> status changed to linking internally
     
     15:44:14.428 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ New spec #Reference<0.1625093714.4277141506.179957>
     structure: %Membrane.ChildrenSpec.StructureBuilder{children: [{:depayloader, Membrane.RTP.H264.Depayloader, %{get_if_exists: false}}, {:jitter_buffer, %Membrane.RTP.JitterBuffer{clock_rate: 90000, latency: 200000000}, %{get_if_exists: false}}], links: [%{from: :depayloader, from_pad: :output, from_pad_props: %{options: []}, to: {Membrane.Bin, :itself}, to_pad: :output, to_pad_props: %{}}, %{from: :jitter_buffer, from_pad: :output, from_pad_props: %{options: []}, to: :depayloader, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}, %{from: {Membrane.Bin, :itself}, from_pad: :input, from_pad_props: %{}, to: :jitter_buffer, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}], status: :done, from_pad: :output, from_pad_props: %{options: []}, to_pad: :output, to_pad_props: %{}, link_starting_child: {Membrane.Bin, :itself}}
     
     
     15:44:14.433 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:payloader/ Element handle link on pad :output with pad :input of child :header_generator
     
     15:44:14.433 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:header_generator/ Element handle link on pad :input with pad :output of child :payloader
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Starting children: [%Membrane.ChildEntry{name: :jitter_buffer, module: Membrane.RTP.JitterBuffer, options: %Membrane.RTP.JitterBuffer{clock_rate: 90000, latency: 200000000}, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141506.179957>, initialized?: false, ready?: false, terminating?: false}, %Membrane.ChildEntry{name: :depayloader, module: Membrane.RTP.H264.Depayloader, options: nil, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141506.179957>, initialized?: false, ready?: false, terminating?: false}] 
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Starting child: name: :jitter_buffer, module: Membrane.RTP.JitterBuffer
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ subprocess supervisor Element start: :jitter_buffer
     node: ,
     module: Membrane.RTP.JitterBuffer,
     element options: %Membrane.RTP.JitterBuffer{clock_rate: 90000, latency: 200000000},
     method: start
     
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:jitter_buffer/ Initializing element: Membrane.RTP.JitterBuffer, options: %Membrane.RTP.JitterBuffer{clock_rate: 90000, latency: 200000000}
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:jitter_buffer/ Element initialized
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Starting child: name: :depayloader, module: Membrane.RTP.H264.Depayloader
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ subprocess supervisor Element start: :depayloader
     node: ,
     module: Membrane.RTP.H264.Depayloader,
     element options: nil,
     method: start
     
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:depayloader/ Initializing element: Membrane.RTP.H264.Depayloader, options: nil
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:depayloader/ Element initialized
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Proceeding spec #Reference<0.1625093714.4277141506.179957> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Setup
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Proceeding spec #Reference<0.1625093714.4277141506.179957> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Proceeding spec #Reference<0.1625093714.4277141506.179957> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Spec #Reference<0.1625093714.4277141506.179957> status changed to initialized
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Got internal link request, pad ref :input, child :jitter_buffer, spec #Reference<0.1625093714.4277141506.179957>
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Got internal link request, pad ref :output, child :depayloader, spec #Reference<0.1625093714.4277141506.179957>
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Starting children: [%Membrane.ChildEntry{name: {:video_parser, "test-track-id"}, module: Membrane.H264.FFmpeg.Parser, options: %Membrane.H264.FFmpeg.Parser{framerate: nil, sps: "", pps: "", alignment: :au, attach_nalus?: true, skip_until_keyframe?: false, skip_until_parameters?: true, max_frame_reorder: 15}, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141506.179911>, initialized?: false, ready?: false, terminating?: false}] 
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Spec #Reference<0.1625093714.4277141506.179957> status changed to linking internally
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Starting child: name: {:video_parser, "test-track-id"}, module: Membrane.H264.FFmpeg.Parser
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:jitter_buffer/ Element handle link on pad :output with pad :input of child :depayloader
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:depayloader/ Element handle link on pad :input with pad :output of child :jitter_buffer
     
     15:44:14.435 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ subprocess supervisor Element start: {:video_parser, "test-track-id"}
     node: ,
     module: Membrane.H264.FFmpeg.Parser,
     element options: %Membrane.H264.FFmpeg.Parser{framerate: nil, sps: "", pps: "", alignment: :au, attach_nalus?: true, skip_until_keyframe?: false, skip_until_parameters?: true, max_frame_reorder: 15},
     method: start
     
     
     15:44:14.436 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:video_parser, "test-track-id"}/ Initializing element: Membrane.H264.FFmpeg.Parser, options: %Membrane.H264.FFmpeg.Parser{framerate: nil, sps: "", pps: "", alignment: :au, attach_nalus?: true, skip_until_keyframe?: false, skip_until_parameters?: true, max_frame_reorder: 15}
     
     15:44:14.436 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Starting children: [%Membrane.ChildEntry{name: {:hls_sink_bin, "test-stream"}, module: Membrane.HTTPAdaptiveStream.SinkBin, options: %Membrane.HTTPAdaptiveStream.SinkBin{manifest_name: "index", manifest_module: Membrane.HTTPAdaptiveStream.HLS, storage: %Membrane.HTTPAdaptiveStream.Storages.FileStorage{directory: "/Users/konkol/Documents/membraneframework/membrane_rtc_engine/tmp/Membrane.RTC.HLSEndpointTest/test-HLS-Endpoint-test-creates-correct-hls-stream-from-single-(h264)-input-62529fc1/test-stream"}, target_window_duration: :infinity, persist?: false, mode: :vod, hls_mode: :separate_av, header_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_header_naming_fun/2, segment_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_segment_naming_fun/1, mp4_parameters_in_band?: true, cleanup_after: nil}, component_type: :bin, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141506.179911>, initialized?: false, ready?: false, terminating?: false}] 
     
     15:44:14.436 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Starting child: name: {:hls_sink_bin, "test-stream"}, module: Membrane.HTTPAdaptiveStream.SinkBin
     
     15:44:14.436 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ subprocess supervisor Bin start: {:hls_sink_bin, "test-stream"}
     node: ,
     module: Membrane.HTTPAdaptiveStream.SinkBin,
     bin options: %Membrane.HTTPAdaptiveStream.SinkBin{manifest_name: "index", manifest_module: Membrane.HTTPAdaptiveStream.HLS, storage: %Membrane.HTTPAdaptiveStream.Storages.FileStorage{directory: "/Users/konkol/Documents/membraneframework/membrane_rtc_engine/tmp/Membrane.RTC.HLSEndpointTest/test-HLS-Endpoint-test-creates-correct-hls-stream-from-single-(h264)-input-62529fc1/test-stream"}, target_window_duration: :infinity, persist?: false, mode: :vod, hls_mode: :separate_av, header_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_header_naming_fun/2, segment_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_segment_naming_fun/1, mp4_parameters_in_band?: true, cleanup_after: nil}
     
     
     15:44:14.440 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ New spec #Reference<0.1625093714.4277141506.179986>
     structure: [%Membrane.ChildrenSpec.StructureBuilder{children: [{:sink, %Membrane.HTTPAdaptiveStream.Sink{manifest_name: "index", manifest_module: Membrane.HTTPAdaptiveStream.HLS, storage: %Membrane.HTTPAdaptiveStream.Storages.FileStorage{directory: "/Users/konkol/Documents/membraneframework/membrane_rtc_engine/tmp/Membrane.RTC.HLSEndpointTest/test-HLS-Endpoint-test-creates-correct-hls-stream-from-single-(h264)-input-62529fc1/test-stream"}, target_window_duration: :infinity, persist?: false, mode: :vod, header_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_header_naming_fun/2, segment_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_segment_naming_fun/1, cleanup_after: nil}, %{get_if_exists: false}}], links: [], status: :done, from_pad: nil, from_pad_props: nil, to_pad: nil, to_pad_props: nil, link_starting_child: :sink}]
     
     
     15:44:14.440 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Starting children: [%Membrane.ChildEntry{name: :sink, module: Membrane.HTTPAdaptiveStream.Sink, options: %Membrane.HTTPAdaptiveStream.Sink{manifest_name: "index", manifest_module: Membrane.HTTPAdaptiveStream.HLS, storage: %Membrane.HTTPAdaptiveStream.Storages.FileStorage{directory: "/Users/konkol/Documents/membraneframework/membrane_rtc_engine/tmp/Membrane.RTC.HLSEndpointTest/test-HLS-Endpoint-test-creates-correct-hls-stream-from-single-(h264)-input-62529fc1/test-stream"}, target_window_duration: :infinity, persist?: false, mode: :vod, header_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_header_naming_fun/2, segment_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_segment_naming_fun/1, cleanup_after: nil}, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141506.179986>, initialized?: false, ready?: false, terminating?: false}] 
     
     15:44:14.440 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Starting child: name: :sink, module: Membrane.HTTPAdaptiveStream.Sink
     
     15:44:14.440 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ subprocess supervisor Element start: :sink
     node: ,
     module: Membrane.HTTPAdaptiveStream.Sink,
     element options: %Membrane.HTTPAdaptiveStream.Sink{manifest_name: "index", manifest_module: Membrane.HTTPAdaptiveStream.HLS, storage: %Membrane.HTTPAdaptiveStream.Storages.FileStorage{directory: "/Users/konkol/Documents/membraneframework/membrane_rtc_engine/tmp/Membrane.RTC.HLSEndpointTest/test-HLS-Endpoint-test-creates-correct-hls-stream-from-single-(h264)-input-62529fc1/test-stream"}, target_window_duration: :infinity, persist?: false, mode: :vod, header_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_header_naming_fun/2, segment_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_segment_naming_fun/1, cleanup_after: nil},
     method: start
     
     
     15:44:14.440 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/:sink/ Initializing element: Membrane.HTTPAdaptiveStream.Sink, options: %Membrane.HTTPAdaptiveStream.Sink{manifest_name: "index", manifest_module: Membrane.HTTPAdaptiveStream.HLS, storage: %Membrane.HTTPAdaptiveStream.Storages.FileStorage{directory: "/Users/konkol/Documents/membraneframework/membrane_rtc_engine/tmp/Membrane.RTC.HLSEndpointTest/test-HLS-Endpoint-test-creates-correct-hls-stream-from-single-(h264)-input-62529fc1/test-stream"}, target_window_duration: :infinity, persist?: false, mode: :vod, header_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_header_naming_fun/2, segment_naming_fun: &Membrane.HTTPAdaptiveStream.Manifest.Track.default_segment_naming_fun/1, cleanup_after: nil}
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/:sink/ Element initialized
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Proceeding spec #Reference<0.1625093714.4277141506.179986> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Setup
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Proceeding spec #Reference<0.1625093714.4277141506.179986> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Spec #Reference<0.1625093714.4277141506.179986> status changed to initialized
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Spec #Reference<0.1625093714.4277141506.179986> status changed to linking internally
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Spec #Reference<0.1625093714.4277141506.179986> status changed to linked internally
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Proceeding spec #Reference<0.1625093714.4277141506.179911> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Spec #Reference<0.1625093714.4277141506.179986> status changed to linking externally
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Proceeding spec #Reference<0.1625093714.4277141506.179911> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Spec #Reference<0.1625093714.4277141506.179986> status changed to ready
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Proceeding spec #Reference<0.1625093714.4277141506.179911> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Proceeding spec #Reference<0.1625093714.4277141506.179911> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.462 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Cleaning spec %{awaiting_responses: MapSet.new([]), children_names: [:sink], dependent_specs: MapSet.new([]), links_ids: [], status: :initializing}
     
     15:44:14.463 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:video_parser, "test-track-id"}/ Element initialized
     
     15:44:14.463 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Proceeding spec #Reference<0.1625093714.4277141506.179911> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.463 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Spec #Reference<0.1625093714.4277141506.179911> status changed to initialized
     
     15:44:14.463 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Got internal link request, pad ref {Membrane.Pad, :input, "test-track-id"}, child {:track_receiver, "test-track-id"}, spec #Reference<0.1625093714.4277141506.179911>
     
     15:44:14.463 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Spec #Reference<0.1625093714.4277141506.179911> status changed to linking internally
     
     15:44:14.463 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Got external link request, link id: #Reference<0.1625093714.4277141506.179939>, pad ref: {Membrane.Pad, :input, {:video, "test-track-id"}}
     
     15:44:14.463 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:parser/ Element initialized
     
     15:44:14.463 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Proceeding spec #Reference<0.1625093714.4277141505.181787> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.463 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Spec #Reference<0.1625093714.4277141505.181787> status changed to initialized
     
     15:44:14.463 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Got internal link request, pad ref {Membrane.Pad, :output, {"test-track-id", :high}}, child :track_sender, spec #Reference<0.1625093714.4277141505.181787>
     
     15:44:14.463 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Spec #Reference<0.1625093714.4277141505.181787> status changed to linking internally
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ New spec #Reference<0.1625093714.4277141507.179666>
     structure: [%Membrane.ChildrenSpec.StructureBuilder{children: [{{:cmaf_muxer, {:video, "test-track-id"}}, %Membrane.MP4.Muxer.CMAF{segment_duration_range: %Membrane.MP4.Muxer.CMAF.SegmentDurationRange{min: 4000000000, target: 5000000000}, partial_segment_duration_range: nil}, %{get_if_exists: false}}, {{:payloader, {:video, "test-track-id"}}, %Membrane.MP4.Payloader.H264{parameters_in_band?: true}, %{get_if_exists: false}}], links: [%{from: {:cmaf_muxer, {:video, "test-track-id"}}, from_pad: :output, from_pad_props: %{options: []}, to: :sink, to_pad: {Membrane.Pad, :input, {:video, "test-track-id"}}, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [track_name: nil, segment_duration: %Membrane.HTTPAdaptiveStream.Sink.SegmentDuration{min: 4000000000, target: 5000000000}, target_partial_segment_duration: nil], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}, %{from: {:payloader, {:video, "test-track-id"}}, from_pad: :output, from_pad_props: %{options: []}, to: {:cmaf_muxer, {:video, "test-track-id"}}, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}, %{from: {Membrane.Bin, :itself}, from_pad: {Membrane.Pad, :input, {:video, "test-track-id"}}, from_pad_props: %{}, to: {:payloader, {:video, "test-track-id"}}, to_pad: :input, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}}], status: :done, from_pad: :output, from_pad_props: %{options: []}, to_pad: {Membrane.Pad, :input, {:video, "test-track-id"}}, to_pad_props: %{auto_demand_size: nil, min_demand_factor: nil, options: [track_name: nil, segment_duration: %Membrane.HTTPAdaptiveStream.Sink.SegmentDuration{min: 4000000000, target: 5000000000}, target_partial_segment_duration: nil], target_queue_size: nil, throttling_factor: 1, toilet_capacity: nil}, link_starting_child: :sink}]
     
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Starting children: [%Membrane.ChildEntry{name: {:payloader, {:video, "test-track-id"}}, module: Membrane.MP4.Payloader.H264, options: %Membrane.MP4.Payloader.H264{parameters_in_band?: true}, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141507.179666>, initialized?: false, ready?: false, terminating?: false}, %Membrane.ChildEntry{name: {:cmaf_muxer, {:video, "test-track-id"}}, module: Membrane.MP4.Muxer.CMAF, options: %Membrane.MP4.Muxer.CMAF{segment_duration_range: %Membrane.MP4.Muxer.CMAF.SegmentDurationRange{min: 4000000000, target: 5000000000}, partial_segment_duration_range: nil}, component_type: :element, pid: nil, clock: nil, sync: nil, spec_ref: #Reference<0.1625093714.4277141507.179666>, initialized?: false, ready?: false, terminating?: false}] 
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Starting child: name: {:payloader, {:video, "test-track-id"}}, module: Membrane.MP4.Payloader.H264
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ subprocess supervisor Element start: {:payloader, {:video, "test-track-id"}}
     node: ,
     module: Membrane.MP4.Payloader.H264,
     element options: %Membrane.MP4.Payloader.H264{parameters_in_band?: true},
     method: start
     
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:payloader, {:video, "test-track-id"}}/ Initializing element: Membrane.MP4.Payloader.H264, options: %Membrane.MP4.Payloader.H264{parameters_in_band?: true}
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:payloader, {:video, "test-track-id"}}/ Element initialized
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Starting child: name: {:cmaf_muxer, {:video, "test-track-id"}}, module: Membrane.MP4.Muxer.CMAF
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ subprocess supervisor Element start: {:cmaf_muxer, {:video, "test-track-id"}}
     node: ,
     module: Membrane.MP4.Muxer.CMAF,
     element options: %Membrane.MP4.Muxer.CMAF{segment_duration_range: %Membrane.MP4.Muxer.CMAF.SegmentDurationRange{min: 4000000000, target: 5000000000}, partial_segment_duration_range: nil},
     method: start
     
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:cmaf_muxer, {:video, "test-track-id"}}/ Initializing element: Membrane.MP4.Muxer.CMAF, options: %Membrane.MP4.Muxer.CMAF{segment_duration_range: %Membrane.MP4.Muxer.CMAF.SegmentDurationRange{min: 4000000000, target: 5000000000}, partial_segment_duration_range: nil}
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:cmaf_muxer, {:video, "test-track-id"}}/ Element initialized
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Proceeding spec #Reference<0.1625093714.4277141507.179666> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Proceeding spec #Reference<0.1625093714.4277141507.179666> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Proceeding spec #Reference<0.1625093714.4277141507.179666> startup: initializing, dependent specs: MapSet.new([])
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Spec #Reference<0.1625093714.4277141507.179666> status changed to initialized
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Got internal link request, pad ref {Membrane.Pad, :input, {:video, "test-track-id"}}, child {:payloader, {:video, "test-track-id"}}, spec #Reference<0.1625093714.4277141507.179666>
     
     15:44:14.471 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Spec #Reference<0.1625093714.4277141507.179666> status changed to linking internally
     
     15:44:14.472 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:payloader, {:video, "test-track-id"}}/ Element handle link on pad :output with pad {Membrane.Pad, :input, #Reference<0.1625093714.4277141506.180017>} of child {:cmaf_muxer, {:video, "test-track-id"}}
     
     15:44:14.472 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:cmaf_muxer, {:video, "test-track-id"}}/ Element handle link on pad {Membrane.Pad, :input, #Reference<0.1625093714.4277141506.180017>} with pad :output of child {:payloader, {:video, "test-track-id"}}
     
     15:44:14.480 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Spec #Reference<0.1625093714.4277141506.179957> status changed to linked internally
     
     15:44:14.480 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Spec #Reference<0.1625093714.4277141505.181816> status changed to linked internally
     
     15:44:14.480 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Spec #Reference<0.1625093714.4277141506.179957> status changed to linking externally
     
     15:44:14.480 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Spec #Reference<0.1625093714.4277141505.181816> status changed to linking externally
     
     15:44:14.480 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:cmaf_muxer, {:video, "test-track-id"}}/ Element handle link on pad :output with pad {Membrane.Pad, :input, {:video, "test-track-id"}} of child :sink
     
     15:44:14.480 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Got external link request, link id: #Reference<0.1625093714.4277141506.179937>, pad ref: :input
     
     15:44:14.480 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Got external link request, link id: #Reference<0.1625093714.4277141506.179921>, pad ref: :input
     
     15:44:14.480 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Sending link response, link_id: #Reference<0.1625093714.4277141506.179921>, pad: :input
     
     15:44:14.480 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Sending link response, link_id: #Reference<0.1625093714.4277141506.179937>, pad: :input
     
     15:44:14.480 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Got external link request, link id: #Reference<0.1625093714.4277141506.179922>, pad ref: :output
     
     15:44:14.481 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Sending link response, link_id: #Reference<0.1625093714.4277141506.179922>, pad: :output
     
     15:44:14.481 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Got external link request, link id: #Reference<0.1625093714.4277141506.179938>, pad ref: :output
     
     15:44:14.481 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/:sink/ Element handle link on pad {Membrane.Pad, :input, {:video, "test-track-id"}} with pad :output of child {:cmaf_muxer, {:video, "test-track-id"}}
     
     15:44:14.481 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Sending link response, link_id: #Reference<0.1625093714.4277141506.179938>, pad: :output
     
     15:44:14.481 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:source/ Element handle link on pad :output with pad :input of child :parser
     
     15:44:14.481 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:parser/ Element handle link on pad :input with pad :output of child :source
     
     15:44:14.481 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Spec #Reference<0.1625093714.4277141507.179666> status changed to linked internally
     
     15:44:14.481 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:parser/ Element handle link on pad :output with pad :input of child :payloader
     
     15:44:14.481 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Sending link response, link_id: #Reference<0.1625093714.4277141506.179939>, pad: {Membrane.Pad, :input, {:video, "test-track-id"}}
     
     15:44:14.481 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Spec #Reference<0.1625093714.4277141507.179666> status changed to linking externally
     
     15:44:14.481 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Element handle link on pad :output with pad :input of child {:depayloader, "test-track-id"}
     
     15:44:14.483 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Handle link %Membrane.Core.Parent.Link.Endpoint{
       child: {:depayloader, "test-track-id"},
       pad_spec: :input,
       pad_ref: :input,
       pid: #PID<0.544.0>,
       pad_props: %{
         auto_demand_size: nil,
         min_demand_factor: nil,
         options: [],
         target_queue_size: nil,
         throttling_factor: 1,
         toilet_capacity: nil
       },
       pad_info: %{
         accepted_formats_str: ["RTP"],
         availability: :always,
         demand_unit: :buffers,
         direction: :input,
         mode: :pull,
         name: :input,
         options: nil
       },
       child_spec_ref: #Reference<0.1625093714.4277141506.179911>
     }
     
     15:44:14.483 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Handle link %Membrane.Core.Parent.Link.Endpoint{
       child: :payloader,
       pad_spec: :input,
       pad_ref: :input,
       pid: #PID<0.526.0>,
       pad_props: %{
         auto_demand_size: nil,
         min_demand_factor: nil,
         options: [],
         target_queue_size: nil,
         throttling_factor: 1,
         toilet_capacity: nil
       },
       pad_info: %{
         accepted_formats_str: ["_any"],
         availability: :always,
         demand_unit: :buffers,
         direction: :input,
         mode: :pull,
         name: :input,
         options: nil
       },
       child_spec_ref: #Reference<0.1625093714.4277141505.181787>
     }
     
     15:44:14.483 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:jitter_buffer/ Element handle link on pad :input with pad :output of child {:track_receiver, "test-track-id"}
     
     15:44:14.483 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:payloader/ Element handle link on pad :input with pad :output of child :parser
     
     15:44:14.483 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Handle link %Membrane.Core.Parent.Link.Endpoint{
       child: {:depayloader, "test-track-id"},
       pad_spec: :output,
       pad_ref: :output,
       pid: #PID<0.544.0>,
       pad_props: %{options: []},
       pad_info: %{
         accepted_formats_str: ["RemoteStream"],
         availability: :always,
         demand_unit: :buffers,
         direction: :output,
         mode: :pull,
         name: :output,
         options: nil
       },
       child_spec_ref: #Reference<0.1625093714.4277141506.179911>
     }
     
     15:44:14.483 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Handle link %Membrane.Core.Parent.Link.Endpoint{
       child: :payloader,
       pad_spec: :output,
       pad_ref: :output,
       pid: #PID<0.526.0>,
       pad_props: %{options: []},
       pad_info: %{
         accepted_formats_str: ["RTP"],
         availability: :always,
         demand_unit: :buffers,
         direction: :output,
         mode: :pull,
         name: :output,
         options: nil
       },
       child_spec_ref: #Reference<0.1625093714.4277141505.181787>
     }
     
     15:44:14.483 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:depayloader/ Element handle link on pad :output with pad :input of child {:video_parser, "test-track-id"}
     
     15:44:14.483 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:header_generator/ Element handle link on pad :output with pad :input of child :track_sender
     
     15:44:14.483 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:video_parser, "test-track-id"}/ Element handle link on pad :input with pad :output of child :depayloader
     
     15:44:14.483 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:track_sender/ Element handle link on pad :input with pad :output of child :header_generator
     
     15:44:14.483 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Spec #Reference<0.1625093714.4277141505.181816> status changed to ready
     
     15:44:14.483 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Spec #Reference<0.1625093714.4277141506.179957> status changed to ready
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Cleaning spec %{awaiting_responses: MapSet.new([]), children_names: [:payloader, :header_generator], dependent_specs: MapSet.new([]), links_ids: [#Reference<0.1625093714.4277141505.181830>, #Reference<0.1625093714.4277141505.181831>, #Reference<0.1625093714.4277141505.181832>], status: :linking_externally}
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Cleaning spec %{awaiting_responses: MapSet.new([]), children_names: [:jitter_buffer, :depayloader], dependent_specs: MapSet.new([]), links_ids: [#Reference<0.1625093714.4277141506.179959>, #Reference<0.1625093714.4277141506.179960>, #Reference<0.1625093714.4277141506.179961>], status: :linking_externally}
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Spec #Reference<0.1625093714.4277141505.181787> status changed to linked internally
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Sending link response, link_id: #Reference<0.1625093714.4277141506.179888>, pad: {Membrane.Pad, :output, {"test-track-id", :high}}
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:video_parser, "test-track-id"}/ Element handle link on pad :output with pad {Membrane.Pad, :input, {:video, "test-track-id"}} of child {:hls_sink_bin, "test-stream"}
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Spec #Reference<0.1625093714.4277141505.181787> status changed to linking externally
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Handle link %Membrane.Core.Parent.Link.Endpoint{
       child: {:hls_sink_bin, "test-stream"},
       pad_spec: {Membrane.Pad, :input, {:video, "test-track-id"}},
       pad_ref: {Membrane.Pad, :input, {:video, "test-track-id"}},
       pid: #PID<0.557.0>,
       pad_props: %{
         auto_demand_size: nil,
         min_demand_factor: nil,
         options: [
           encoding: :H264,
           segment_duration: %Membrane.HTTPAdaptiveStream.Sink.SegmentDuration{
             min: 4000000000,
             target: 5000000000
           },
           partial_segment_duration: nil
         ],
         target_queue_size: nil,
         throttling_factor: 1,
         toilet_capacity: nil
       },
       pad_info: %{
         accepted_formats_str: ["Membrane.AAC",
          "%Membrane.H264{profile: profile} when profile in @accepted_h264_profiles"],
         availability: :on_request,
         demand_unit: :buffers,
         direction: :input,
         mode: :pull,
         name: :input,
         options: [
           encoding: [
             spec: ":AAC | :H264",
             description: "Encoding type determining which payloader will be used for the given stream.\n\nFor H264, the accepted profiles are :constrained_baseline, :baseline, :high.\n"
           ],
           track_name: [
             spec: "String.t() | nil",
             default: nil,
             description: "Name that will be used to name the media playlist for the given track, as well as its header and segments files.\nIt must not contain any URI reserved characters\n"
           ],
           segment_duration: [
             spec: "Sink.SegmentDuration.t()",
             description: "The segment duration range  of the regular segments.\n"
           ],
           partial_segment_duration: [
             spec: "Sink.SegmentDuration.t() | nil",
             default: nil,
             description: "The segment duration range  of the partial segments.\nIf not set then the bin won't produce any partial segments.\n"
           ]
         ]
       },
       child_spec_ref: #Reference<0.1625093714.4277141506.179911>
     }
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:payloader, {:video, "test-track-id"}}/ Element handle link on pad :input with pad :output of child {:video_parser, "test-track-id"}
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Spec #Reference<0.1625093714.4277141507.179666> status changed to ready
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Cleaning spec %{awaiting_responses: MapSet.new([]), children_names: [payloader: {:video, "test-track-id"}, cmaf_muxer: {:video, "test-track-id"}], dependent_specs: MapSet.new([]), links_ids: [#Reference<0.1625093714.4277141514.179775>, #Reference<0.1625093714.4277141514.179776>, #Reference<0.1625093714.4277141514.179777>], status: :linking_externally}
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Spec #Reference<0.1625093714.4277141506.179911> status changed to linked internally
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Sending link response, link_id: #Reference<0.1625093714.4277141506.179889>, pad: {Membrane.Pad, :input, "test-track-id"}
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Spec #Reference<0.1625093714.4277141506.179911> status changed to linking externally
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Handle link %Membrane.Core.Parent.Link.Endpoint{
       child: {:endpoint, "file-endpoint-id"},
       pad_spec: {Membrane.Pad, :output, {"test-track-id", :high}},
       pad_ref: {Membrane.Pad, :output, {"test-track-id", :high}},
       pid: #PID<0.513.0>,
       pad_props: %{options: []},
       pad_info: %{
         accepted_formats_str: ["_any"],
         availability: :on_request,
         demand_unit: :buffers,
         direction: :output,
         mode: :pull,
         name: :output,
         options: nil
       },
       child_spec_ref: #Reference<0.1625093714.4277141506.179854>
     }
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:track_sender/ Element handle link on pad :output with pad {Membrane.Pad, :input, {"test-track-id", :high}} of child {:tee, "test-track-id"}
     
     15:44:14.484 [debug] <0.505.0>/{:tee, "test-track-id"}/ Element handle link on pad {Membrane.Pad, :input, {"test-track-id", :high}} with pad :output of child :track_sender
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Spec #Reference<0.1625093714.4277141505.181787> status changed to ready
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Parent play
     
     15:44:14.484 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:source/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Cleaning spec %{awaiting_responses: MapSet.new([]), children_names: [:source, :parser, :payloader, :track_sender], dependent_specs: MapSet.new([]), links_ids: [#Reference<0.1625093714.4277141506.179920>, #Reference<0.1625093714.4277141506.179921>, #Reference<0.1625093714.4277141506.179922>, #Reference<0.1625093714.4277141506.179923>], status: :linking_externally}
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:track_sender/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:parser/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:header_generator/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:payloader/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/{:tee, "test-track-id"}/ Element handle link on pad {Membrane.Pad, :output, {:endpoint, "hls-endpoint"}} with pad {Membrane.Pad, :input, "test-track-id"} of child {:endpoint, "hls-endpoint"}
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Handle link %Membrane.Core.Parent.Link.Endpoint{
       child: {:endpoint, "hls-endpoint"},
       pad_spec: {Membrane.Pad, :input, "test-track-id"},
       pad_ref: {Membrane.Pad, :input, "test-track-id"},
       pid: #PID<0.509.0>,
       pad_props: %{
         auto_demand_size: nil,
         min_demand_factor: nil,
         options: [],
         target_queue_size: nil,
         throttling_factor: 1,
         toilet_capacity: 200
       },
       pad_info: %{
         accepted_formats_str: ["_any"],
         availability: :on_request,
         demand_unit: :buffers,
         direction: :input,
         mode: :pull,
         name: :input,
         options: nil
       },
       child_spec_ref: #Reference<0.1625093714.4277141505.181691>
     }
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Element handle link on pad :input with pad {Membrane.Pad, :output, {:endpoint, "hls-endpoint"}} of child {:tee, "test-track-id"}
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Spec #Reference<0.1625093714.4277141506.179911> status changed to ready
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Parent play
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Parent play
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:video_parser, "test-track-id"}/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/:sink/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:payloader, {:video, "test-track-id"}}/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:cmaf_muxer, {:video, "test-track-id"}}/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Cleaning spec %{awaiting_responses: MapSet.new([]), children_names: [track_receiver: "test-track-id", depayloader: "test-track-id", video_parser: "test-track-id", hls_sink_bin: "test-stream"], dependent_specs: MapSet.new([]), links_ids: [#Reference<0.1625093714.4277141506.179936>, #Reference<0.1625093714.4277141506.179937>, #Reference<0.1625093714.4277141506.179938>, #Reference<0.1625093714.4277141506.179939>], status: :linking_externally}
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:depayloader/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:jitter_buffer/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141506.179885> status changed to linked internally
     
     15:44:14.485 [debug] <0.505.0>/ Spec #Reference<0.1625093714.4277141506.179885> status changed to ready
     
     15:44:14.485 [debug] <0.505.0>/{:tee, "test-track-id"}/ Got play request
     
     15:44:14.485 [debug] <0.505.0>/ Cleaning spec %{awaiting_responses: MapSet.new([]), children_names: [tee: "test-track-id"], dependent_specs: MapSet.new([]), links_ids: [#Reference<0.1625093714.4277141506.179888>, #Reference<0.1625093714.4277141506.179889>], status: :linking_internally}
     
     15:44:14.488 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:source/ Sending stream format through pad :output
     Stream format: %Membrane.RemoteStream{content_format: nil, type: :bytestream}
     
     
     15:44:14.489 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:payloader/ Sending stream format through pad :output
     Stream format: %Membrane.RTP{}
     
     
     15:44:14.492 [debug] <0.505.0>/{:tee, "test-track-id"}/ Sending stream format through pad {Membrane.Pad, :output, {:endpoint, "hls-endpoint"}}
     Stream format: %Membrane.RTP{}
     
     
     15:44:14.494 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:header_generator/ Sending stream format through pad :output
     Stream format: %Membrane.RTP{}
     
     
     15:44:14.500 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:track_sender/ Sending stream format through pad :output
     Stream format: %Membrane.RTP{}
     
     
     15:44:14.500 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Sending stream format through pad :output
     Stream format: %Membrane.RTP{}
     
     
     15:44:14.501 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:jitter_buffer/ Sending stream format through pad :output
     Stream format: %Membrane.RTP{}
     
     
     15:44:14.501 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:depayloader/ Sending stream format through pad :output
     Stream format: %Membrane.RemoteStream{content_format: Membrane.H264, type: :packetized}
     
     
     15:44:14.505 [info] <0.505.0>/{:tee, "test-track-id"}/ Track variant {"test-track-id", :high} resumed.
     
     15:44:14.505 [debug] <0.505.0>/{:tee, "test-track-id"}/ Sending stream format through pad {Membrane.Pad, :output, {:endpoint, "hls-endpoint"}}
     Stream format: %Membrane.RTP{}
     
     
     15:44:14.507 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:parser/ received start of stream
     
     15:44:14.507 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Received event: %Membrane.RTC.Engine.Event.TrackVariantResumed{variant: :high}
     
     15:44:14.508 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Variant active high
     
     15:44:14.508 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Enqueuing variant :high.
     
     15:44:14.508 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Next desired variant {:error, :doesnt_exist}
     
     15:44:14.508 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Sending stream format through pad :output
     Stream format: %Membrane.RTP{}
     
     
     15:44:14.508 [debug] <0.505.0>/{:tee, "test-track-id"}/ Endpoint hls-endpoint requested track variant high. Requesting keyframe.
     
     
     15:44:14.508 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:jitter_buffer/ Sending stream format through pad :output
     Stream format: %Membrane.RTP{}
     
     
     15:44:14.508 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:depayloader/ Sending stream format through pad :output
     Stream format: %Membrane.RemoteStream{content_format: Membrane.H264, type: :packetized}
     
     
     15:44:14.516 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:parser/ Sending stream format through pad :output
     Stream format: %Membrane.H264{width: 1920, height: 1080, framerate: {60, 1}, profile: :high, alignment: :nal, nalu_in_metadata?: false}
     
     
     15:44:14.516 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:payloader/ received start of stream
     
     15:44:14.524 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:header_generator/ received start of stream
     
     15:44:14.524 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:track_sender/ received start of stream
     
     15:44:14.528 [debug] <0.505.0>/{:tee, "test-track-id"}/ received start of stream
     
     15:44:14.532 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Received event: %Membrane.RTC.Engine.Event.TrackVariantSwitched{new_variant: :high, reason: :other}
     
     15:44:14.532 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Next desired variant {:error, :doesnt_exist}
     
     15:44:14.532 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ received start of stream
     
     15:44:14.533 [warning] <0.505.0>/{:endpoint, "hls-endpoint"}/ Unexpected notification: {:variant_switched, :high, :other}. Ignoring.
     
     15:44:14.534 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Initializing RTP and VP8 mungers
     
     15:44:14.534 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:jitter_buffer/ received start of stream
     
     15:44:14.568 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:depayloader/ received start of stream
     
     15:44:14.568 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:video_parser, "test-track-id"}/ received start of stream
     
     15:44:14.569 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:video_parser, "test-track-id"}/ Sending stream format through pad :output
     Stream format: %Membrane.H264{width: 1920, height: 1080, framerate: {0, 1}, profile: :high, alignment: :au, nalu_in_metadata?: true}
     
     
     15:44:14.569 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:payloader, {:video, "test-track-id"}}/ received start of stream
     
     15:44:14.577 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:payloader, {:video, "test-track-id"}}/ Sending stream format through pad :output
     Stream format: %Membrane.MP4.Payload{content: %Membrane.MP4.Payload.AVC1{avcc: <<1, 100, 0, 42, 255, 225, 0, 29, 103, 100, 0, 42, 172, 217, 64, 120, 2, 39, 229, 154, 129, 1, 2, 160, 0, 0, 3, 0, 32, 0, 0, 15, 1, 227, 6, 50, 192, 1, 0, 6, 104, 235, 227, 203, 34, 192>>, inband_parameters?: true}, timescale: 30720, height: 1080, width: 1920}
     
     
     15:44:14.601 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:cmaf_muxer, {:video, "test-track-id"}}/ Sending stream format through pad :output
     Stream format: %Membrane.CMAF.Track{content_type: :video, header: <<0, 0, 0, 24, 102, 116, 121, 112, 105, 115, 111, 53, 0, 0, 2, 0, 105, 115, 111, 54, 109, 112, 52, 49, 0, 0, 2, 141, 109, 111, 111, 118, 0, 0, 0, 108, 109, 118, 104, 100, 0, 0, 0, 0, 0, 0, 0, 0, ...>>}
     
     
     15:44:14.601 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:cmaf_muxer, {:video, "test-track-id"}}/ received start of stream
     
     15:44:14.620 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/:sink/ received start of stream
     
     15:44:14.620 [warning] <0.505.0>/{:endpoint, "hls-endpoint"}/ Unexpected notification: :start_of_stream. Ignoring.
     
     15:44:14.635 [warning] <0.505.0>/{:endpoint, "hls-endpoint"}/ Unexpected notification: :end_of_stream. Ignoring.
     
     15:44:19.093 [debug] OTLP exporter failed to initialize: exception error: undefined function opentelemetry_exporter:init/1
       in function  otel_exporter:init/1 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_exporter.erl, line 42)
       in call from otel_batch_processor:idle/3 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_batch_processor.erl, line 143)
       in call from gen_statem:loop_state_callback/11 (gen_statem.erl, line 1426)
       in call from proc_lib:init_p_do_apply/3 (proc_lib.erl, line 240)
     
     15:44:19.095 [debug] OTLP exporter failed to initialize: exception error: undefined function opentelemetry_exporter:init/1
       in function  otel_exporter:init/1 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_exporter.erl, line 42)
       in call from otel_batch_processor:idle/3 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_batch_processor.erl, line 137)
       in call from gen_statem:loop_state_callback/11 (gen_statem.erl, line 1426)
       in call from proc_lib:init_p_do_apply/3 (proc_lib.erl, line 240)
     
     15:44:24.100 [debug] OTLP exporter failed to initialize: exception error: undefined function opentelemetry_exporter:init/1
       in function  otel_exporter:init/1 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_exporter.erl, line 42)
       in call from otel_batch_processor:idle/3 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_batch_processor.erl, line 143)
       in call from gen_statem:loop_state_callback/11 (gen_statem.erl, line 1426)
       in call from proc_lib:init_p_do_apply/3 (proc_lib.erl, line 240)
     
     15:44:24.102 [debug] OTLP exporter failed to initialize: exception error: undefined function opentelemetry_exporter:init/1
       in function  otel_exporter:init/1 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_exporter.erl, line 42)
       in call from otel_batch_processor:idle/3 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_batch_processor.erl, line 137)
       in call from gen_statem:loop_state_callback/11 (gen_statem.erl, line 1426)
       in call from proc_lib:init_p_do_apply/3 (proc_lib.erl, line 240)
     
     15:44:29.106 [debug] OTLP exporter failed to initialize: exception error: undefined function opentelemetry_exporter:init/1
       in function  otel_exporter:init/1 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_exporter.erl, line 42)
       in call from otel_batch_processor:idle/3 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_batch_processor.erl, line 143)
       in call from gen_statem:loop_state_callback/11 (gen_statem.erl, line 1426)
       in call from proc_lib:init_p_do_apply/3 (proc_lib.erl, line 240)
     
     15:44:29.109 [debug] OTLP exporter failed to initialize: exception error: undefined function opentelemetry_exporter:init/1
       in function  otel_exporter:init/1 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_exporter.erl, line 42)
       in call from otel_batch_processor:idle/3 (/Users/konkol/Documents/membraneframework/membrane_rtc_engine/deps/opentelemetry/src/otel_batch_processor.erl, line 137)
       in call from gen_statem:loop_state_callback/11 (gen_statem.erl, line 1426)
       in call from proc_lib:init_p_do_apply/3 (proc_lib.erl, line 240)
     
     15:44:29.633 [debug] <0.505.0>/ Removing children: [endpoint: "file-endpoint-id", tee: "test-track-id"]
     
     15:44:29.633 [warning] <0.505.0>/{:endpoint, "hls-endpoint"}/ Unexpected message: {:remove_tracks, [%Membrane.RTC.Engine.Track{type: :video, stream_id: "test-stream", id: "test-track-id", origin: "file-endpoint-id", fmtp: nil, encoding: :H264, variants: [:high], clock_rate: 90000, active?: true, metadata: %{"mainPresenter" => false}, ctx: %{}, payload_type: nil}]}. Ignoring.
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ Removing children: [:parser, :payloader, :source, :track_sender]
     
     15:44:29.633 [debug] <0.505.0>/{:tee, "test-track-id"}/ Received terminate request
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:parser/ Received terminate request
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:track_sender/ Received terminate request
     
     15:44:29.633 [debug] <0.505.0>/{:tee, "test-track-id"}/ Terminating with reason :normal
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:parser/ Terminating with reason :normal
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:track_sender/ Terminating with reason :normal
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ Removing children: [:header_generator, :payloader]
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:header_generator/ Received terminate request
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:header_generator/ Terminating with reason :normal
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:source/ Received terminate request
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:payloader/ Received terminate request
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:payloader/ Terminating with reason :normal
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ Removing children: [video_parser: "test-track-id", track_receiver: "test-track-id", depayloader: "test-track-id", hls_sink_bin: "test-stream"]
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:source/ Terminating with reason :normal
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:video_parser, "test-track-id"}/ Received terminate request
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Received terminate request
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ Removing children: [:depayloader, :jitter_buffer]
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:video_parser, "test-track-id"}/ Terminating with reason :normal
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ Terminating with reason :normal
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:jitter_buffer/ Received terminate request
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ Removing children: [:sink, {:cmaf_muxer, {:video, "test-track-id"}}, {:payloader, {:video, "test-track-id"}}]
     
     15:44:29.633 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:jitter_buffer/ Terminating with reason :normal
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:depayloader/ Received terminate request
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/:sink/ Received terminate request
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:depayloader/ Terminating with reason :normal
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:payloader, {:video, "test-track-id"}}/ Received terminate request
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/:sink/ Terminating with reason :normal
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:cmaf_muxer, {:video, "test-track-id"}}/ Received terminate request
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:payloader, {:video, "test-track-id"}}/ Terminating with reason :normal
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:cmaf_muxer, {:video, "test-track-id"}}/ Terminating with reason :normal
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:video_parser, "test-track-id"}/ subprocess supervisor exiting
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:payloader/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.634 [debug] <0.505.0>/{:tee, "test-track-id"}/ subprocess supervisor exiting
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:depayloader/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:track_receiver, "test-track-id"}/ subprocess supervisor exiting
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/:sink/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/:header_generator/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:parser/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:track_sender/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:cmaf_muxer, {:video, "test-track-id"}}/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/:jitter_buffer/ subprocess supervisor exiting
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:source/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.634 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/{:payloader, {:video, "test-track-id"}}/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.638 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/:payloader/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.640 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:hls_sink_bin, "test-stream"}/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.640 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/{:depayloader, "test-track-id"}/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.649 [debug] <0.505.0>/ Removing children: [endpoint: "hls-endpoint"]
     
     15:44:29.649 [debug] <0.505.0>/ Removing children: []
     
     15:44:29.649 [debug] <0.505.0>/ Pipeline supervisor got exit from a linked process, stopping pipeline
     
     15:44:29.649 [debug] <0.505.0>/{:endpoint, "hls-endpoint"}/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.649 [debug] <0.505.0>/ Pipeline supervisor got exit from pipeline with reason :shutdown, stopping subprocess supervisor
     
     15:44:29.649 [debug] <0.505.0>/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.649 [debug] <0.505.0>/{:endpoint, "file-endpoint-id"}/ subprocess supervisor got exit request from parent, reason: :shutdown, shutting down children
     
     15:44:29.649 [debug] <0.505.0>/ Pipeline supervisor got exit from subprocess supervisor, exiting
     

Finished in 15.4 seconds (0.00s async, 15.4s sync)
5 tests, 1 failure, 4 excluded

Randomized with seed 107913
